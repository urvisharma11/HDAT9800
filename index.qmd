---
title: "HDAT9800"
author: "Urvi Sharma"
format: html
editor: visual
---

# Chapter 3



## Loading libraries

```{r}
library(dplyr)

library(ggplot2)
library(nycflights13)
dim(flights)
head(flights)
glimpse(flights)
```

 

```{r}
filter(flights, month == 1, day == 1) # For rows

slice(flights, 1:4) # For rows

arrange(flights, year, month, day) # Reorders rows

arrange(flights, desc(arr_delay)) |> select(arr_delay) # Reorders 'arr_delay
# as descending and this is then piped to select(), that filters the column.
# Some examples to use select():
select(flights, year:day)

select(flights, -(year:day)) # Columns you dont wanna see.

select(flights, tail_num = tailnum) # Renaming a column. Can also be done as
#rename(flights, tail_num = tailnum) |> select(year:day, tail_num)

mutate(flights, gain = arr_delay - dep_delay, speed = distance/air_time*60) |> select(arr_delay, dep_delay, distance, air_time, gain, speed) # Adding new cols that are functions of existing cols.

summarise(flights, delay = mean(dep_delay, na.rm = TRUE)) #By default collapses a df to a single row. 

sample_n(flights, 10) #Takes 10 random rows. 

sample_frac(flights, 0.01) #Takes 0.01 of the df randomly.
```

```{r}
# Grouped operation example:
by_tailnum <- group_by(flights, tailnum)

delay <- summarise(by_tailnum,
                   count = n(),
                   dist = mean(distance, na.rm = TRUE),
                   delay = mean(arr_delay, na.rm = TRUE))
delay <- filter(delay, count > 20, dist < 2000)
```

```{r}
ggplot(delay, aes(dist,delay))+
  geom_point(aes(size=count), alpha = 1/2)+ #size = count: the size of each point is based on the number of flights (so busier aircraft show up larger).
#alpha = 1/2: makes the points semi-transparent so overlaps are easier to see.
  geom_smooth()+ scale_size_area() #Scales the area of the bubbles directly based on the data values â€” not the radius.
```

```{r}
# Finding the number of planes and flights going to each possible destination.
destinations <- group_by(flights, dest)
summarise(destinations,
          planes = n_distinct(tailnum),
          flights = n())
```

```{r}
# Chaining
flights %>%
  group_by(year,month,day) %>%
  select(arr_delay, dep_delay) %>%
  summarise(
    arr = mean(arr_delay, na.rm = TRUE),
    dep = mean(dep_delay, na.rm = TRUE) 
  ) %>%
  filter(arr > 30 | dep > 30)
  
```

